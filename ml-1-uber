#Importing the required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
*--*
#importing the dataset
df  = pd.read_csv("uber.csv")

*--*
df.head(), df.info(), df.columns, df.dtypes, df.describe()
*--*
df = df.drop(['Unnamed: 0', 'key'], axis= 1)
*--*
df.isnull().sum()
*-*
df['dropoff_latitude'].fillna(value=df['dropoff_latitude'].mean(),inplace = True)
df['dropoff_longitude'].fillna(value=df['dropoff_longitude'].median(),inplace = True)
*--*
df.isnull().sum()
*--*
df.dtypes
df.columns
*--*
df.pickup_datetime = pd.to_datetime(df.pickup_datetime, errors='coerce')
*--*
df.dtypes
df.head()
*--*
df.plot(kind = "box",subplots = True, layout = (7,2), figsize = (15,20))
*--*
#Using the InterQuartile Range to fill the values
def remove_outlier(df1 , col):
    Q1 = df1[col].quantile(0.25)
    Q3 = df1[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_whisker = Q1-1.5*IQR
    upper_whisker = Q3+1.5*IQR
    df[col] = np.clip(df1[col] , lower_whisker , upper_whisker)
    return df1

def treat_outliers_all(df1 , col_list):
    for c in col_list:
        df1 = remove_outlier(df , c)
    return df1
*--*
df = treat_outliers_all(df , df.iloc[: , 0::])
*--*
df.plot(kind = "box",subplots = True,layout = (7,2),figsize=(15,20)) #Boxplot shows that dataset is free from outliers
*--*
corr = df.corr() #Function to find the correlation
*--*
Corr
*--*
fig,axis = plt.subplots(figsize = (10,6))
sns.heatmap(df.corr(),annot = True) #Correlation Heatmap (Light values means highly correlated)
*--*
df.columns
*--*
x = df[['pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count']]
*--*
y = df['fare_amount']
*--*
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(x,y,test_size = 0.33)
*--*
from sklearn.linear_model import LinearRegression
regression = LinearRegression()
*--*
regression.fit(X_train,y_train)
*--*
LinearRegression()
*--*
regression.intercept_
*--*
regression.coef_
*--*
prediction = regression.predict(X_test)
*--*
prediction = regression.predict(X_test)
*--*
print(prediction)
*--*
y_test
*--*
from sklearn.metrics import r2_score
-**-
r2_score(y_test,prediction)
*--*
from sklearn.metrics import mean_squared_error
*--*
MSE = mean_squared_error(y_test,prediction)
*--*
MSE
*--*
RMSE = np.sqrt(MSE)
*--*
RMSE
-**-
from sklearn.ensemble import RandomForestRegressor
*--*
rf = RandomForestRegressor(n_estimators=100)
*--*
rf.fit(X_train,y_train)
*--*
y_pred = rf.predict(X_test)
*--*
y_pred

*--*
R2_Random = r2_score(y_test,y_pred)
*--*
R2_Random
*--*
MSE_Random = mean_squared_error(y_test,y_pred)
*--*
MSE_Random
*--*
RMSE_Random = np.sqrt(MSE_Random)
**-
RMSE_Random
