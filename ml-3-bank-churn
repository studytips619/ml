import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt #Importing the libraries
*-*
df = pd.read_csv("Churn_Modelling.csv")
*-*
df.head(), df.shape, df.describe(), df.isnull(), df.isnull().sum(), df.info(), df.dtypes, df.columns, 
*-*
df = df.drop(['RowNumber', 'Surname', 'CustomerId'], axis= 1)
*-*
df.head()
*-*
X = df[['CreditScore','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary']]
*-*
y = df['Exited']
*-*
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.30)
*-*
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
*-*
X_train  = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
*-*
X_train
*-*
X_test
-*-
from keras.models import Sequential #To create sequential neural network
from keras.layers import Dense #To create hidden layers
*-*
classifier = Sequential()
-*-
classifier.add(Dense(activation = "relu",input_dim = 11,units = 6,kernel_initializer = "uniform"))
*-*-
pip install keras
pip install tensorflow
import keras
from keras.models import Sequential #To create sequential neural network
from keras.layers import Dense #To create hidden layers
*-*
classifier = Sequential()
*-*
classifier.add(Dense(activation = "relu",units = 6,kernel_initializer = "uniform"))   #Adding second hidden layers
*-*
classifier.add(Dense(activation = "sigmoid",units = 1,kernel_initializer = "uniform")) 
*-*
classifier.add(Dense(activation = "sigmoid",units = 1,kernel_initializer = "uniform")) 
*-*
classifier.compile(optimizer="adam",loss = 'binary_crossentropy',metrics = ['accuracy']) 
*-*
classifier.build()
-**
classifier.fit(X_train,y_train,batch_size=10,epochs=50) #Fitting the ANN to training dataset
*-*
y_pred =classifier.predict(X_test)
y_pred = (y_pred > 0.5) #Predicting the result
*-*
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
*-*
from sklearn.metrics import confusion_matrix,accuracy_score,classification_report
*-*
cm = confusion_matrix(y_test,y_pred)
*-*
Cm
*-
accuracy = accuracy_score(y_test,y_pred)
*-*
Accuracy
*-*
plt.figure(figsize = (10,7))
sns.heatmap(cm,annot = True)
plt.xlabel('Predicted')
plt.ylabel('Truth')
*--
print(classification_report(y_test,y_pred))

